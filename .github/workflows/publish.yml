name: Publish to PyPI and NPM

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish_target:
        description: 'Where to publish'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - pypi
          - npm
      version_bump:
        description: 'Version bump type (for manual trigger)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.publish_target == 'both' || github.event.inputs.publish_target == 'pypi'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Extract version from release tag
        if: github.event_name == 'release'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Update version in pyproject.toml
        if: github.event_name == 'release'
        run: |
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          cat pyproject.toml | grep version
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: |
          twine check dist/*
          ls -la dist/
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* --verbose

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.publish_target == 'both' || github.event.inputs.publish_target == 'npm'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Extract version from release tag
        if: github.event_name == 'release'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Update version in package.json
        if: github.event_name == 'release'
        run: |
          npm version $VERSION --no-git-tag-version --allow-same-version
          cat package.json | grep version
      
      - name: Configure NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      
      - name: Publish to NPM
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-npm]
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
      - name: Update release with links
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = context.payload.release;
            const version = release.tag_name.replace('v', '');
            
            const additionalNotes = `
            
            ## ðŸ“¦ Installation
            
            ### Via NPM (recommended for MCP):
            \`\`\`bash
            npm install -g crawl4ai-mcp-sse-stdio@${version}
            npx crawl4ai-mcp --help
            \`\`\`
            
            ### Via PyPI:
            \`\`\`bash
            pip install crawl4ai-mcp==${version}
            crawl4ai-mcp --help
            \`\`\`
            
            ### Via Docker:
            \`\`\`bash
            docker pull stgmt/crawl4ai-mcp:${version}
            docker run -it stgmt/crawl4ai-mcp:${version} --help
            \`\`\`
            
            ## ðŸ”— Package Links
            - [NPM Package](https://www.npmjs.com/package/crawl4ai-mcp-sse-stdio/v/${version})
            - [PyPI Package](https://pypi.org/project/crawl4ai-mcp/${version}/)
            - [Docker Hub](https://hub.docker.com/r/stgmt/crawl4ai-mcp/tags)
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + additionalNotes
            });