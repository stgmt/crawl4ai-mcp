name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Python dependencies
      run: |
        cd python-mcp-server
        pip install -r requirements.txt
        pip install ruff black

    - name: Install Node dependencies
      run: |
        cd mcp-server-tester
        npm ci

    - name: Run Python linting (ruff)
      run: |
        cd python-mcp-server
        ruff check .

    - name: Run Python formatting (black)
      run: |
        cd python-mcp-server
        black --check .

    - name: Run Node.js linting
      run: |
        cd mcp-server-tester
        npm run lint

  test-npm:
    name: Test NPM Package
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        cd mcp-server-tester
        npm ci

    - name: Build TypeScript
      run: |
        cd mcp-server-tester
        npm run build

    - name: Run tests
      run: |
        cd mcp-server-tester
        npm test

  test-python:
    name: Test Python Package
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd python-mcp-server
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run Python tests
      run: |
        cd python-mcp-server
        python -m pytest -v

    - name: Test server startup
      run: |
        cd python-mcp-server
        timeout 10s python -m src.server || true

  test-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd python-mcp-server
        docker build -t crawl4ai-mcp:test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container crawl4ai-mcp:test || true
        sleep 5
        docker logs test-container || true
        docker stop test-container || true